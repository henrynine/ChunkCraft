### Starting build.
# Target: main.mli.depends, tags: { package(ANSITerminal), extension:mli, file:main.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules main.mli > main.mli.depends
# Target: main.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:main.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o main.cmi main.mli
# Target: main.ml.depends, tags: { package(ANSITerminal), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules main.ml > main.ml.depends
# Target: blocks.mli.depends, tags: { package(ANSITerminal), extension:mli, file:blocks.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules blocks.mli > blocks.mli.depends
# Target: items.mli.depends, tags: { package(ANSITerminal), extension:mli, file:items.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules items.mli > items.mli.depends
# Target: items.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:items.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o items.cmi items.mli
# Target: control.mli.depends, tags: { package(ANSITerminal), extension:mli, file:control.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules control.mli > control.mli.depends
# Target: state.mli.depends, tags: { package(ANSITerminal), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules state.mli > state.mli.depends
# Target: blocks.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:blocks.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o blocks.cmi blocks.mli
# Target: state.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o state.cmi state.mli
# Target: display.mli.depends, tags: { package(ANSITerminal), extension:mli, file:display.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules display.mli > display.mli.depends
# Target: control.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:control.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o control.cmi control.mli
# Target: display.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:display.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o display.cmi display.mli
# Target: main.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o main.cmo main.ml
+ ocamlfind ocamlc -c -package ANSITerminal -o main.cmo main.ml
File "main.ml", line 147, characters 16-35:
Warning 52: Code should not depend on the actual values of
this constructor's arguments. They are only for information
and may change in future versions. (See manual section 8.5)
# Target: blocks.ml.depends, tags: { package(ANSITerminal), extension:ml, file:blocks.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules blocks.ml > blocks.ml.depends
# Target: control.ml.depends, tags: { package(ANSITerminal), extension:ml, file:control.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules control.ml > control.ml.depends
# Target: display.ml.depends, tags: { package(ANSITerminal), extension:ml, file:display.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules display.ml > display.ml.depends
# Target: items.ml.depends, tags: { package(ANSITerminal), extension:ml, file:items.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules items.ml > items.ml.depends
# Target: state.ml.depends, tags: { package(ANSITerminal), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules state.ml > state.ml.depends
# Target: blocks.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:blocks.cmo, file:blocks.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o blocks.cmo blocks.ml
# Target: control.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:control.cmo, file:control.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o control.cmo control.ml
# Target: display.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:display.cmo, file:display.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o display.cmo display.ml
+ ocamlfind ocamlc -c -package ANSITerminal -o display.cmo display.ml
File "display.ml", line 120, characters 65-68:
Warning 10: this expression should have type unit.
File "display.ml", line 129, characters 67-70:
Warning 10: this expression should have type unit.
File "display.ml", line 145, characters 67-70:
Warning 10: this expression should have type unit.
File "display.ml", line 154, characters 67-70:
Warning 10: this expression should have type unit.
# Target: items.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:items.cmo, file:items.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o items.cmo items.ml
# Target: state.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o state.cmo state.ml
+ ocamlfind ocamlc -c -package ANSITerminal -o state.cmo state.ml
File "state.ml", line 3, characters 5-9:
Error: Unbound module Item
Command exited with code 2.
# Compilation unsuccessful.
