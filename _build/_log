### Starting build.
# Target: main.mli.depends, tags: { package(ANSITerminal), package(OUnit), extension:mli, file:main.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules main.mli > main.mli.depends # cached
# Target: state.mli.depends, tags: { package(ANSITerminal), package(OUnit), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules state.mli > state.mli.depends # cached
# Target: blocks.mli.depends, tags: { package(ANSITerminal), package(OUnit), extension:mli, file:blocks.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules blocks.mli > blocks.mli.depends # cached
# Target: items.mli.depends, tags: { package(ANSITerminal), package(OUnit), extension:mli, file:items.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules items.mli > items.mli.depends # cached
# Target: items.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, extension:mli, file:items.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package OUnit -o items.cmi items.mli # cached
# Target: blocks.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, extension:mli, file:blocks.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package OUnit -o blocks.cmi blocks.mli # cached
# Target: state.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package OUnit -o state.cmi state.mli # cached
# Target: main.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, extension:mli, file:main.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package OUnit -o main.cmi main.mli # cached
# Target: main.ml.depends, tags: { package(ANSITerminal), package(OUnit), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules main.ml > main.ml.depends # cached
# Target: control.mli.depends, tags: { package(ANSITerminal), package(OUnit), extension:mli, file:control.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules control.mli > control.mli.depends # cached
# Target: control.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, extension:mli, file:control.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package OUnit -o control.cmi control.mli # cached
# Target: display.mli.depends, tags: { package(ANSITerminal), package(OUnit), extension:mli, file:display.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules display.mli > display.mli.depends # cached
# Target: display.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, extension:mli, file:display.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package OUnit -o display.cmi display.mli # cached
# Target: main.cmo, tags: { package(ANSITerminal), package(OUnit), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package OUnit -o main.cmo main.ml # cached
# Target: blocks.ml.depends, tags: { package(ANSITerminal), package(OUnit), extension:ml, file:blocks.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules blocks.ml > blocks.ml.depends # cached
# Target: colors.mli.depends, tags: { package(ANSITerminal), package(OUnit), extension:mli, file:colors.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules colors.mli > colors.mli.depends # cached
# Target: colors.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, extension:mli, file:colors.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package OUnit -o colors.cmi colors.mli # cached
# Target: control.ml.depends, tags: { package(ANSITerminal), package(OUnit), extension:ml, file:control.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules control.ml > control.ml.depends # cached
# Target: display.ml.depends, tags: { package(ANSITerminal), package(OUnit), extension:ml, file:display.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules display.ml > display.ml.depends # cached
# Target: items.ml.depends, tags: { package(ANSITerminal), package(OUnit), extension:ml, file:items.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules items.ml > items.ml.depends # cached
# Target: state.ml.depends, tags: { package(ANSITerminal), package(OUnit), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package OUnit -modules state.ml > state.ml.depends
+ ocamlfind ocamldep -package ANSITerminal -package OUnit -modules state.ml > state.ml.depends
File "state.ml", line 359, characters 2-4:
Error: Syntax error
Command exited with code 2.
# Compilation unsuccessful.
